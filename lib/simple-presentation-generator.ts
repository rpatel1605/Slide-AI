import JSZip from "jszip"
import pptxgen from "pptxgenjs"

interface Slide {
  title: string
  content: string
}

export async function createSimplePresentation(topic: string, slides: Slide[]): Promise<Buffer> {
  try {
    const zip = new JSZip()

    // Create a folder for the presentation
    const presentationFolder = zip.folder(topic.replace(/[^a-z0-9]/gi, "-").toLowerCase())

    if (!presentationFolder) {
      throw new Error("Failed to create presentation folder")
    }

    // Generate a markdown version of the presentation
    let markdownContent = `# ${topic}\n\n`
    slides.forEach((slide, index) => {
      markdownContent += `## ${slide.title}\n\n`
      markdownContent += `${slide.content}\n\n`
    })

    // Add the markdown file
    presentationFolder.file("presentation.md", markdownContent)

    // Add a simple HTML version that can be viewed in a browser
    let htmlContent = `<!DOCTYPE html>
<html>
<head>
  <title>${topic} - Presentation</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 20px;
      line-height: 1.6;
    }
    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 40px;
    }
    .slide {
      margin-bottom: 40px;
      padding: 20px;
      border-radius: 8px;
      background: #f8f9fa;
    }
    .slide-title {
      font-size: 24px;
      color: #2c3e50;
      margin-bottom: 15px;
      border-bottom: 2px solid #3498db;
      padding-bottom: 10px;
    }
    .slide-content {
      font-size: 16px;
      color: #34495e;
    }
    .slide-content p {
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  <h1>${topic}</h1>
  <div class="slides">
`

    slides.forEach((slide, index) => {
      htmlContent += `
    <div class="slide">
      <div class="slide-title">${slide.title}</div>
      <div class="slide-content">${slide.content.replace(/\n/g, "<br>")}</div>
    </div>
`
    })

    htmlContent += `
  </div>
</body>
</html>`

    presentationFolder.file("presentation.html", htmlContent)

    // Add a text version
    let textContent = `PRESENTATION: ${topic}\n\n`
    slides.forEach((slide, index) => {
      textContent += `SLIDE ${index + 1}: ${slide.title}\n`
      textContent += `${slide.content}\n\n`
    })

    presentationFolder.file("presentation.txt", textContent)

    // Create and add PowerPoint version
    try {
      const pptx = new pptxgen()
      
      // Set presentation properties
      pptx.author = "AI Presentation Generator"
      pptx.title = topic
      pptx.subject = "AI Generated Presentation"
      pptx.company = "AI Presentation Generator"

      // Define color scheme
      const colors = {
        primary: "2563EB", // Blue
        secondary: "3B82F6", // Lighter blue
        accent: "1E40AF", // Dark blue
        text: "1F2937", // Dark gray for text
        lightText: "6B7280", // Light gray for secondary text
        background: "FFFFFF", // White
      }

      // Define styles
      const titleStyle = {
        x: 0.5,        // inches from left
        y: 0.5,        // inches from top
        w: 9.0,        // width in inches
        h: 1.0,        // height in inches
        fontSize: 36,
        color: colors.text,
        bold: true,
        align: "center" as const,
        fontFace: "Arial",
        margin: 0.1,
        fill: { color: "F8FAFC" }, // Very light blue background
        shadow: { type: "outer" as const, blur: 3, offset: 2, color: "000000", opacity: 0.2 }
      }

      const contentStyle = {
        x: 1.0,        // inches from left
        y: 1.8,        // inches from top
        w: 8.0,        // width in inches
        h: 0.5,        // height for each bullet point
        fontSize: 20,
        color: colors.text,
        fontFace: "Arial",
        bullet: { 
          type: "bullet",
          indent: 20,
          color: colors.primary 
        },
        margin: 0.1,
        breakLine: true
      }

      // Create title slide
      const titleSlide = pptx.addSlide()
      
      // Add background to title slide
      titleSlide.background = { color: colors.primary }
      
      // Add title to first slide with special styling
      titleSlide.addText(topic, {
        x: 0.5,
        y: 2.5,        // Center vertically
        w: 9.0,
        h: 1.5,
        fontSize: 44,
        color: colors.background, // White text on blue
        bold: true,
        align: "center" as const,
        fontFace: "Arial",
        shadow: { type: "outer" as const, blur: 3, offset: 2, color: "000000", opacity: 0.3 }
      })

      // Add subtitle with matching style
      titleSlide.addText("Generated by AI Presentation Generator", {
        x: 0.5,
        y: 4.0,
        w: 9.0,
        h: 0.8,
        fontSize: 20,
        color: colors.background,
        align: "center" as const,
        fontFace: "Arial"
      })

      // Create content slides
      for (const slideData of slides) {
        const slide = pptx.addSlide()
        
        // Add background to content slides
        slide.background = { color: colors.background }

        // Add decorative shape as accent
        slide.addShape("rect", {
          x: 0,
          y: 0,
          w: 1.0,
          h: 7.5,
          fill: { color: colors.primary }
        })

        // Add slide title with enhanced styling
        const slideTitle = slideData.title || `Slide`
        slide.addText(slideTitle, {
          ...titleStyle,
          color: colors.primary,
          bold: true
        })

        // Add slide content
        const content = slideData.content || `Content for slide`

        // Split content into bullet points if it's not already
        const contentLines = content
          .split(/\n|â€¢/)
          .map((line) => line.trim())
          .filter((line) => line.length > 0)

        if (contentLines.length > 1) {
          // Calculate spacing for bullet points
          const totalHeight = 5.0 // Total available height for content
          const spacing = Math.min(0.8, totalHeight / contentLines.length) // Dynamic spacing based on number of points

          // Add each line as a separate text object with bullet
          contentLines.forEach((line, index) => {
            slide.addText(line, {
              ...contentStyle,
              y: contentStyle.y + (index * spacing), // Space out each bullet point
              h: spacing * 0.8, // Slightly smaller than spacing to create gap
              bullet: { type: "bullet", indent: 20 },
              color: index === 0 ? colors.text : colors.lightText // First point darker
            })
          })
        } else {
          // Add as a single paragraph with styling
          slide.addText(content, {
            ...contentStyle,
            w: 8.0,
            h: 4.0,
            bullet: undefined,
            autoFit: true,
            color: colors.text,
            fill: { color: "F8FAFC" }, // Very light background
            shadow: { type: "outer" as const, blur: 2, offset: 1, color: "000000", opacity: 0.1 }
          })
        }
      }

      // Generate the PowerPoint file using the correct method
      const pptxBuffer = await (pptx as any).write('nodebuffer')
      presentationFolder.file("presentation.pptx", pptxBuffer)
    } catch (error) {
      console.error("Error creating PowerPoint file:", error)
      // Continue without the PowerPoint file
    }

    // Add a README file
    presentationFolder.file(
      "README.txt",
      `This is a presentation package for "${topic}".
    
Contents:
- presentation.pptx: PowerPoint version of the presentation (if available)
- presentation.md: Markdown version of the presentation
- presentation.html: HTML version that can be viewed in any browser
- presentation.txt: Plain text version of the presentation
`,
    )

    // Generate the zip file
    const buffer = await zip.generateAsync({ type: "nodebuffer" })
    return buffer
  } catch (error) {
    console.error("Error in createSimplePresentation:", error)

    // If all else fails, return a simple text file
    const textContent = `PRESENTATION: ${topic}\n\n${slides
      .map((slide, i) => `SLIDE ${i + 1}: ${slide.title}\n${slide.content}`)
      .join("\n\n")}`

    return Buffer.from(textContent)
  }
}

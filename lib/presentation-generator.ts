import PptxGenJS from "pptxgenjs";
// No separate import for HAlign needed

interface Slide {
    title: string;
    content: string;
}

export async function createPresentation(topic: string, slides: Slide[]): Promise<Buffer> {
    try {
        const pptx = new PptxGenJS();

        pptx.author = "AI Presentation Generator";
        pptx.title = topic;
        pptx.subject = "AI Generated Presentation";
        pptx.company = "AI Presentation Generator";

        // Define styles using the library's alignment constants
        // Let TypeScript infer the type of the style objects
        const titleStyle = {
            fontSize: 36,
            color: "363636",
            bold: true,
            align: PptxGenJS.AlignH.center, // ✅ Use the constant
            fontFace: "Arial",
        };

        const contentStyle = {
            fontSize: 24,
            color: "363636",
            fontFace: "Arial",
            bullet: true,
            lineSpacing: 1.5,
            // Default align is usually left, but you could specify:
            // align: PptxGenJS.AlignH.left,
        };

        // Title Slide
        const titleSlide = pptx.addSlide();
        titleSlide.background = { color: "FFFFFF" };
        titleSlide.addText(topic, {
            ...titleStyle, // 'align' is inherited (center)
            fontSize: 44,
            y: "30%",
            w: "100%",
            // You might also want vertical alignment:
            // valign: PptxGenJS.AlignV.middle
        });
        titleSlide.addText("Generated by AI Presentation Generator", {
            // Use a base style, but override specific properties
            fontSize: 20,
            color: "363636", // Inherit from contentStyle or define explicitly
            fontFace: "Arial", // Inherit from contentStyle or define explicitly
            y: "50%",
            w: "100%",
            align: PptxGenJS.AlignH.center, // ✅ Use the constant
            bullet: false,
        });

        // Content Slides
        for (const slideData of slides) {
            const slide = pptx.addSlide();
            slide.background = { color: "FFFFFF" };

            const slideTitle = slideData.title || `Slide`;
            slide.addText(slideTitle, {
                ...titleStyle, // 'align' is inherited (center)
                fontSize: 32,
                x: "5%",
                y: "5%",
                w: "90%",
            });

            const content = slideData.content || `Content for slide`;

            const contentLines = content
                .split(/\n|•/)
                .map((line) => line.trim())
                .filter((line) => line.length > 0);

            if (contentLines.length > 1) {
                const contentLinesObjects = contentLines.map((line) => ({ text: line }));
                slide.addText(contentLinesObjects, {
                    ...contentStyle, // 'bullet: true' is inherited
                    x: "5%",
                    y: "25%",
                    w: "90%",
                    h: "70%",
                     // Default align is left, which is usually correct for bullets
                     // align: PptxGenJS.AlignH.left // Explicit if needed
                });
            } else if (contentLines.length === 1) {
                 slide.addText(contentLines[0], {
                    ...contentStyle,
                    bullet: false, // Disable bullet for single line
                    x: "5%",
                    y: "25%",
                    w: "90%",
                    h: "70%",
                    // align: PptxGenJS.AlignH.left // Explicit if needed
                });
            }
        }

        // Generate Buffer
        try {
            const buffer = (await pptx.write({ outputType: "nodebuffer" })) as Buffer;
            console.log("Presentation buffer generated successfully.");
            return buffer;
        } catch (writeError) {
            console.error("Error writing presentation to buffer:", writeError);
            throw new Error(
                `Failed to write presentation to buffer: ${writeError instanceof Error ? writeError.message : String(writeError)}`
            );
        }
    } catch (error) {
        console.error("Error in createPresentation:", error);
        throw new Error(`PowerPoint generation failed: ${error instanceof Error ? error.message : String(error)}`);
    }
}
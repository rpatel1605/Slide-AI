import pptxgen from "pptxgenjs"

interface Slide {
  title: string
  content: string
}

export async function createPresentation(topic: string, slides: Slide[]): Promise<Buffer> {
  try {
    // Create a new presentation
    const pptx = new pptxgen()

    // Set presentation properties
    pptx.author = "AI Presentation Generator"
    pptx.title = topic
    pptx.subject = "AI Generated Presentation"
    pptx.company = "AI Presentation Generator"

    // Define styles
    const titleStyle = {
      fontSize: 36,
      color: "363636",
      bold: true,
      align: "center",
      fontFace: "Arial",
    }

    const contentStyle = {
      fontSize: 24,
      color: "363636",
      fontFace: "Arial",
      bullet: true,
      lineSpacing: 1.5,
    }

    // Create title slide
    const titleSlide = pptx.addSlide()
    titleSlide.background = { color: "FFFFFF" }
    titleSlide.addText(topic, {
      ...titleStyle,
      fontSize: 44,
      y: "30%",
      w: "100%",
    })
    titleSlide.addText("Generated by AI Presentation Generator", {
      ...contentStyle,
      fontSize: 20,
      y: "50%",
      w: "100%",
      align: "center",
      bullet: false,
    })

    // Create content slides
    for (const slideData of slides) {
      const slide = pptx.addSlide()
      slide.background = { color: "FFFFFF" }

      // Add slide title
      const slideTitle = slideData.title || `Slide`
      slide.addText(slideTitle, {
        ...titleStyle,
        fontSize: 32,
        x: "5%",
        y: "5%",
        w: "90%",
      })

      // Add slide content
      const content = slideData.content || `Content for slide`

      // Split content into bullet points if it's not already
      const contentLines = content
        .split(/\n|â€¢/)
        .map((line) => line.trim())
        .filter((line) => line.length > 0)

      if (contentLines.length > 1) {
        // Add as bullet points
        slide.addText(contentLines, {
          ...contentStyle,
          x: "5%",
          y: "25%",
          w: "90%",
          h: "70%",
        })
      } else {
        // Add as paragraph
        slide.addText(content, {
          ...contentStyle,
          bullet: false,
          x: "5%",
          y: "25%",
          w: "90%",
          h: "70%",
        })
      }
    }

    // Create a buffer from the presentation
    try {
      const buffer = (await pptx.writeFile({ outputType: "nodebuffer" })) as Buffer
      return buffer
    } catch (writeError) {
      console.error("Error writing presentation to buffer:", writeError)
      throw new Error(
        `Failed to write presentation to buffer: ${writeError instanceof Error ? writeError.message : String(writeError)}`,
      )
    }
  } catch (error) {
    console.error("Error in createPresentation:", error)
    throw new Error(`PowerPoint generation failed: ${error instanceof Error ? error.message : String(error)}`)
  }
}
